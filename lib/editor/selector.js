"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var contents = {};

var recordContent = exports.recordContent = function recordContent(content) {
	return contents[content.id] = content;
};

var getContent = exports.getContent = function getContent(id) {
	return contents[id];
};

var findTextIn = function findTextIn(content) {
	var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

	if (typeof content.getContent() == 'string') return content;
	return content.computed.children["reduce" + direction](function (state, next) {
		if (state) return state;
		return findTextIn(next, direction);
	}, null);
};

var getNextTextOf = exports.getNextTextOf = function getNextTextOf(id) {
	var current = getContent(id);
	var parent = current.context.parent;
	var children = parent.computed.children;
	var index = children.findIndex(function (a) {
		return a == current;
	});
	var found = children[index + 1];
	while (!found && parent.context.parent) {
		current = parent;
		parent = parent.context.parent;
		children = parent.computed.children;
		index = children.findIndex(function (a) {
			return a == current;
		});
		found = children.filter(function (a, i) {
			return i > index;
		}).reduce(function (state, next) {
			if (state) return state;
			return findTextIn(next);
		}, null);
	}

	return found;
};

var getPrevTextOf = exports.getPrevTextOf = function getPrevTextOf(id) {
	var current = getContent(id);
	var parent = current.context.parent;
	var children = parent.computed.children;
	var index = children.findIndex(function (a) {
		return a == current;
	});
	var found = children[index - 1];
	while (!found && parent.context.parent) {
		current = parent;
		parent = parent.context.parent;
		children = parent.computed.children;
		index = children.findIndex(function (a) {
			return a == current;
		});
		found = children.filter(function (a, i) {
			return i < index;
		}).reduceRight(function (state, next) {
			if (state) return state;
			return findTextIn(next, "Right");
		}, null);
	}

	return found;
};

var getContentClientBoundBox = exports.getContentClientBoundBox = function getContentClientBoundBox(id, at) {
	var found = void 0,
	    from = void 0;
	var texts = document.querySelectorAll("svg text[data-content=\"" + id + "\"][end]");
	for (var i = 0, len = texts.length; i < len; i++) {
		var a = texts[i];
		var end = parseInt(a.getAttribute('end'));
		var length = a.textContent.length;
		var start = end - length;
		if (start <= at && at < end) {
			found = a;
			from = start;
			break;
		}
	}

	if (!found) throw new Error("can't found text(" + id + "," + at + ")");

	var _found$getBoundingCli = found.getBoundingClientRect(),
	    top = _found$getBoundingCli.top,
	    left = _found$getBoundingCli.left;

	return { top: top, left: left, from: from };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lZGl0b3Ivc2VsZWN0b3IuanMiXSwibmFtZXMiOlsiY29udGVudHMiLCJyZWNvcmRDb250ZW50IiwiY29udGVudCIsImlkIiwiZ2V0Q29udGVudCIsImZpbmRUZXh0SW4iLCJkaXJlY3Rpb24iLCJjb21wdXRlZCIsImNoaWxkcmVuIiwic3RhdGUiLCJuZXh0IiwiZ2V0TmV4dFRleHRPZiIsImN1cnJlbnQiLCJwYXJlbnQiLCJjb250ZXh0IiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJhIiwiZm91bmQiLCJmaWx0ZXIiLCJpIiwicmVkdWNlIiwiZ2V0UHJldlRleHRPZiIsInJlZHVjZVJpZ2h0IiwiZ2V0Q29udGVudENsaWVudEJvdW5kQm94IiwiYXQiLCJmcm9tIiwidGV4dHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW4iLCJsZW5ndGgiLCJlbmQiLCJwYXJzZUludCIsImdldEF0dHJpYnV0ZSIsInRleHRDb250ZW50Iiwic3RhcnQiLCJFcnJvciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsImxlZnQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsV0FBUyxFQUFiOztBQUVPLElBQU1DLHdDQUFjLFNBQWRBLGFBQWM7QUFBQSxRQUFTRCxTQUFTRSxRQUFRQyxFQUFqQixJQUFxQkQsT0FBOUI7QUFBQSxDQUFwQjs7QUFFQSxJQUFNRSxrQ0FBVyxTQUFYQSxVQUFXO0FBQUEsUUFBSUosU0FBU0csRUFBVCxDQUFKO0FBQUEsQ0FBakI7O0FBRVAsSUFBTUUsYUFBVyxTQUFYQSxVQUFXLENBQUNILE9BQUQsRUFBeUI7QUFBQSxLQUFmSSxTQUFlLHVFQUFMLEVBQUs7O0FBQ3pDLEtBQUcsT0FBT0osUUFBUUUsVUFBUixFQUFQLElBQThCLFFBQWpDLEVBQ0MsT0FBT0YsT0FBUDtBQUNELFFBQU9BLFFBQVFLLFFBQVIsQ0FBaUJDLFFBQWpCLFlBQW1DRixTQUFuQyxFQUFnRCxVQUFDRyxLQUFELEVBQU9DLElBQVAs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QUFDekMsTUFBSUgsSUFBRVUsTUFBTVAsQ0FBTixDQUFOO0FBQ0EsTUFBSVksTUFBSUMsU0FBU2hCLEVBQUVpQixZQUFGLENBQWUsS0FBZixDQUFULENBQVI7QUFDQSxNQUFJSCxTQUFPZCxFQUFFa0IsV0FBRixDQUFjSixNQUF6QjtBQUNBLE1BQUlLLFFBQU1KLE1BQUlELE1BQWQ7QUFDQSxNQUFHSyxTQUFPWCxFQUFQLElBQWFBLEtBQUdPLEdBQW5CLEVBQXVCO0FBQ3RCZCxXQUFNRCxDQUFOO0FBQ0FTLFVBQUtVLEtBQUw7QUFDQTtBQUNBO0FBQ0Q7O0FBRUQsS0FBRyxDQUFDbEIsS0FBSixFQUNDLE1BQU0sSUFBSW1CLEtBQUosdUJBQThCbEMsRUFBOUIsU0FBb0NzQixFQUFwQyxPQUFOOztBQWhCOEMsNkJBaUJoQ1AsTUFBTW9CLHFCQUFOLEVBakJnQztBQUFBLEtBaUIxQ0MsR0FqQjBDLHlCQWlCMUNBLEdBakIwQztBQUFBLEtBaUJ0Q0MsSUFqQnNDLHlCQWlCdENBLElBakJzQzs7QUFrQi9DLFFBQU8sRUFBQ0QsUUFBRCxFQUFLQyxVQUFMLEVBQVVkLFVBQVYsRUFBUDtBQUNBLENBbkJNIiwiZmlsZSI6InNlbGVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGNvbnRlbnRzPXt9XHJcblxyXG5leHBvcnQgY29uc3QgcmVjb3JkQ29udGVudD1jb250ZW50PT5jb250ZW50c1tjb250ZW50LmlkXT1jb250ZW50XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q29udGVudD1pZD0+Y29udGVudHNbaWRdXHJcblxyXG5jb25zdCBmaW5kVGV4dEluPShjb250ZW50LCBkaXJlY3Rpb249XCJcIik9PntcclxuXHRpZih0eXBlb2YoY29udGVudC5nZXRDb250ZW50KCkpPT0nc3RyaW5nJylcclxuXHRcdHJldHVybiBjb250ZW50XHJcblx0cmV0dXJuIGNvbnRlbnQuY29tcHV0ZWQuY2hpbGRyZW5bYHJlZHVjZSR7ZGlyZWN0aW9ufWBdKChzdGF0ZSxuZXh0KT0+e1xyXG5cdFx0aWYoc3RhdGUpXHJcblx0XHRcdHJldHVybiBzdGF0ZVxyXG5cdFx0cmV0dXJuIGZpbmRUZXh0SW4obmV4dCwgZGlyZWN0aW9uKVxyXG5cdH0sbnVsbClcclxufVxyXG5cdFx0XHJcbmV4cG9ydCBjb25zdCBnZXROZXh0VGV4dE9mPWlkPT57XHJcblx0bGV0IGN1cnJlbnQ9Z2V0Q29udGVudChpZClcclxuXHRsZXQgcGFyZW50PWN1cnJlbnQuY29udGV4dC5wYXJlbnRcclxuXHRsZXQgY2hpbGRyZW49cGFyZW50LmNvbXB1dGVkLmNoaWxkcmVuXHJcblx0bGV0IGluZGV4PWNoaWxkcmVuLmZpbmRJbmRleChhPT5hPT1jdXJyZW50KVxyXG5cdGxldCBmb3VuZD1jaGlsZHJlbltpbmRleCsxXVxyXG5cdHdoaWxlKCFmb3VuZCAmJiBwYXJlbnQuY29udGV4dC5wYXJlbnQpe1xyXG5cdFx0Y3VycmVudD1wYXJlbnRcclxuXHRcdHBhcmVudD1wYXJlbnQuY29udGV4dC5wYXJlbnRcclxuXHRcdGNoaWxkcmVuPXBhcmVudC5jb21wdXRlZC5jaGlsZHJlblxyXG5cdFx0aW5kZXg9Y2hpbGRyZW4uZmluZEluZGV4KGE9PmE9PWN1cnJlbnQpXHJcblx0XHRmb3VuZD1jaGlsZHJlbi5maWx0ZXIoKGEsaSk9Pmk+aW5kZXgpLnJlZHVjZSgoc3RhdGUsbmV4dCk9PntcclxuXHRcdFx0aWYoc3RhdGUpXHJcblx0XHRcdFx0cmV0dXJuIHN0YXRlXHJcblx0XHRcdHJldHVybiBmaW5kVGV4dEluKG5leHQpXHJcblx0XHR9LG51bGwpXHJcblx0fVxyXG5cdFxyXG5cdHJldHVybiBmb3VuZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UHJldlRleHRPZj1pZD0+e1xyXG5cdGxldCBjdXJyZW50PWdldENvbnRlbnQoaWQpXHJcblx0bGV0IHBhcmVudD1jdXJyZW50LmNvbnRleHQucGFyZW50XHJcblx0bGV0IGNoaWxkcmVuPXBhcmVudC5jb21wdXRlZC5jaGlsZHJlblxyXG5cdGxldCBpbmRleD1jaGlsZHJlbi5maW5kSW5kZXgoYT0+YT09Y3VycmVudClcclxuXHRsZXQgZm91bmQ9Y2hpbGRyZW5baW5kZXgtMV1cclxuXHR3aGlsZSghZm91bmQgJiYgcGFyZW50LmNvbnRleHQucGFyZW50KXtcclxuXHRcdGN1cnJlbnQ9cGFyZW50XHJcblx0XHRwYXJlbnQ9cGFyZW50LmNvbnRleHQucGFyZW50XHJcblx0XHRjaGlsZHJlbj1wYXJlbnQuY29tcHV0ZWQuY2hpbGRyZW5cclxuXHRcdGluZGV4PWNoaWxkcmVuLmZpbmRJbmRleChhPT5hPT1jdXJyZW50KVxyXG5cdFx0Zm91bmQ9Y2hpbGRyZW4uZmlsdGVyKChhLGkpPT5pPGluZGV4KS5yZWR1Y2VSaWdodCgoc3RhdGUsbmV4dCk9PntcclxuXHRcdFx0aWYoc3RhdGUpXHJcblx0XHRcdFx0cmV0dXJuIHN0YXRlXHJcblx0XHRcdHJldHVybiBmaW5kVGV4dEluKG5leHQsXCJSaWdodFwiKVxyXG5cdFx0fSxudWxsKVxyXG5cdH1cclxuXHRcclxuXHRyZXR1cm4gZm91bmRcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldENvbnRlbnRDbGllbnRCb3VuZEJveD0oaWQsIGF0KT0+e1xyXG5cdGxldCBmb3VuZCwgZnJvbVxyXG5cdGxldCB0ZXh0cz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBzdmcgdGV4dFtkYXRhLWNvbnRlbnQ9XCIke2lkfVwiXVtlbmRdYClcclxuXHRmb3IobGV0IGk9MCwgbGVuPXRleHRzLmxlbmd0aDsgaTxsZW47IGkrKyl7XHJcblx0XHRsZXQgYT10ZXh0c1tpXVxyXG5cdFx0bGV0IGVuZD1wYXJzZUludChhLmdldEF0dHJpYnV0ZSgnZW5kJykpXHJcblx0XHRsZXQgbGVuZ3RoPWEudGV4dENvbnRlbnQubGVuZ3RoXHJcblx0XHRsZXQgc3RhcnQ9ZW5kLWxlbmd0aFxyXG5cdFx0aWYoc3RhcnQ8PWF0ICYmIGF0PGVuZCl7XHJcblx0XHRcdGZvdW5kPWFcclxuXHRcdFx0ZnJvbT1zdGFydFxyXG5cdFx0XHRicmVha1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYoIWZvdW5kKVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKGBjYW4ndCBmb3VuZCB0ZXh0KCR7aWR9LCR7YXR9KWApXHJcblx0bGV0IHt0b3AsbGVmdH09Zm91bmQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHRyZXR1cm4ge3RvcCxsZWZ0LGZyb219XHJcbn1cclxuIl19